module component

import ui
import gx

pub type MenuFileFn = fn (&MenuFileComponent)

[heap]
struct MenuFileComponent {
	layout &ui.Stack
	hidden_files bool
}

[params]
pub struct MenuFileParams {
	id string
	hidden_files bool
	dirs []string
	on_save MenuFileFn
	on_new MenuFileFn
}

pub fn menufile_stack(p MenuFileParams) &ui.Stack {

	layout := ui.column(
		id: ui.component_part_id(p.id, "layout")
		heights: [40.0, 30.0, ui.stretch]
		spacing: 5
		margin_: 3
		bg_color: gx.black
		children: [
			ui.row(
			widths: ui.stretch
			heights: 30.0
			margin: ui.Margin{5, 10, 5, 10}
			spacing: 10
			bg_color: gx.black
			children: [
				ui.button(
					tooltip: 'New File'
					tooltip_side: .right
					text: 'New'
					onclick: btn_new_click
					radius: .3
					z_index: 10
				),
				ui.button(
					tooltip: 'Open Folder'
					tooltip_side: .right
					text: 'Open'
					onclick: btn_open_click
					radius: .3
					z_index: 10
				),
				ui.button(
					tooltip: 'Save File'
					tooltip_side: .right
					text: 'Save'
					///onclick: btn_save_click
					radius: .3
					z_index: 10
				),
			]
		),
			hideable_stack(
				id: 'htb'
				layout: ui.row(
					id: 'htbl'
					margin_: 3
					heights: 24.0
					spacing: 3
					widths: [
						ui.stretch,
						24,
					]
					children: [
						ui.textbox(id: 'tb', z_index: 10),
						ui.button(
							id: 'tb_ok'
							text: 'Ok'
							z_index: 10
							radius: 5
							onclick: btn_new_ok
						),
					]
				)
			),
			ui.column(
				id: 'tvcol'
				scrollview: true
				heights: ui.compact
				bg_color: gx.hex(0xfcf4e4ff)
				children: [
					dirtreeview_stack(
						id: 'dtv'
						trees: p.dirs
						hidden_files: p.hidden_files
						///on_click: treeview_onclick
					),
				]
			)]
	)
	mf := &MenuFileComponent{
		layout: layout
	}
	ui.component_connect(mf, layout)
	return layout
}

// component access
pub fn menufile_component(w ui.ComponentChild) &MenuFileComponent {
	return &MenuFileComponent(w.component)
}

pub fn menufile_component_from_id(w ui.Window, id string) &MenuFileComponent {
	return menufile_component(w.stack(ui.component_part_id(id, 'layout')))
}

// Init

pub fn menufile_init(layout &ui.Stack) {
	uic.filebrowser_subwindow_add(mut window,
			id: 'fb'
			folder_only: true
			width: 400
			height: 300
			x: 50
			y: 50
			bg_color: gx.white
			on_click_ok: btn_open_ok
			on_click_cancel: btn_open_cancel
		)
}

// New
fn btn_new_click(a voidptr, b &ui.Button) {
	// println('new')
	mut h := uic.hideable_component_from_id(b.ui.window, 'htb')
	h.toggle()
}

fn btn_new_ok(mut app App, b &ui.Button) {
	// // println('ok new')
	// tb := b.ui.window.textbox('tb')
	// mut h := uic.hideable_component_from_id(b.ui.window, "htb")
	// mut dtv := uic.treeview_by_id(b.ui.window, 'dtv')
	// if dtv.sel_id != '' {
	// 	sel_path := dtv.selected_full_title()
	// 	app.folder_to_open = if dtv.types[dtv.sel_id] == 'root' {
	// 		sel_path
	// 	} else {
	// 		os.dir(sel_path)
	// 	}
	// 	app.file = os.join_path(app.folder_to_open, *tb.text)
	// 	// println("open folder: ${app.folder_to_open}, new file: ${app.file}")
	// 	os.write_file(app.file, '') or {}
	// 	dtv.open(app.folder_to_open)
	// }
	// h.hide()
}

// Open folder
fn btn_open_click(a voidptr, b &ui.Button) {
	// // println('open')
	uic.filebrowser_subwindow_visible(b.ui.window)
}

fn btn_open_ok(mut app App, b &ui.Button) {
	// println('ok')
	uic.filebrowser_subwindow_close(b.ui.window)
	fb := uic.filebrowser_component(b)
	app.folder_to_open = fb.selected_full_title()
	mut dtv := uic.treeview_by_id(b.ui.window, 'dtv')
	dtv.open(app.folder_to_open)
}

fn btn_open_cancel(mut app App, b &ui.Button) {
	// println('cancel open')
	uic.filebrowser_subwindow_close(b.ui.window)
	app.folder_to_open = ''
}

// Save file
fn btn_save_click(app &App, b &ui.Button) {
	// // println("save")
	mut rv := uic.rasterview_component_from_id(b.ui.window, 'rv')
	rv.save_to(app.file)
	// tb := b.ui.window.textbox('edit')
	// // println("text: <${*tb.text}>")
	// mut app := &App(b.ui.window.state)
	// // println(tb.text)
	// os.write_file(app.file, tb.text) or {}
	b.ui.window.root_layout.unfocus_all()
}